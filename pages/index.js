import Head from "next/head";
import Image from "next/image";
import { useState } from "react";
import styles from "../styles/Home.module.css";
const shuffle = require("shuffle-array");

export default function Home() {
    const [wrong_choices, set_wrong_choices] = useState(["", "", "", "", ""]);
    const [correct_choice, set_correct_choice] = useState("");
    const [question_body, set_question_body] = useState("");
    const [output, set_output] = useState("");

    // always give image field for convenience so no need to put it in later
    function buildQuestion() {
        return `<pl-question-panel>
    <p>
        ${question_body}
    </p>
    <p><pl-figure file-name="image.png" directory="clientFilesQuestion" width="300"></pl-figure></p>
</pl-question-panel>\n`;
    }

    function buildChoices() {
        let choices_arr = [];
        // get the wrong choices with content
        choices_arr = wrong_choices
            .filter((choice) => choice !== "")
            .map((choice) => {
                return `<pl-answer correct="false">${choice}</pl-answer>\n`;
            });
        // get the correct choice if there is one
        if (correct_choice.length > 0) {
            choices_arr.push(
                `<pl-answer correct="true" >${correct_choice}</pl-answer>\n`
            );
        }
        // shuffle the choices string array
        choices_arr = shuffle(choices_arr);
        return choices_arr.join("");
    }

    const getOutputedQs = () => {
        // map the questions and put it on the right side
        const question_part = buildQuestion();
        const multiple_choice_part = buildChoices();
        console.log(question_part + multiple_choice_part + "\n");
        set_output(question_part + multiple_choice_part);
    };

    return (
        <div>
            <Head>
                <title>Prairelearn</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className="flex flex-row">
                <div className="basis-1/2">
                    <h1 className="text-center font-bold text-3xl m-10">
                        input side
                    </h1>
                    <div className="m-4">
                        <h3>Question body</h3>
                        <textarea
                            className="
        form-control
        block
        w-full
        px-3
        py-1.5
        text-base
        font-normal
        text-gray-700
        bg-white bg-clip-padding
        border border-solid border-gray-300
        rounded
        transition
        ease-in-out
        m-0
        focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none
      "
                            id="questionBody"
                            rows="10"
                            placeholder="Question body"
                            onChange={(e) => set_question_body(e.target.value)}
                        ></textarea>
                    </div>
                    <div className="m-4">
                        <label className="text-green-700">Correct</label>
                        <br></br>
                        <input
                            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                            onChange={(v) => {
                                set_correct_choice(v.target.value);
                            }}
                        ></input>
                    </div>
                    {wrong_choices.map((_, index) => {
                        return (
                            <div className="m-4" key={index}>
                                <label className="text-red-700">
                                    Incorrect
                                </label>
                                <br></br>
                                <input
                                    className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                                    onChange={(v) => {
                                        let new_wrong_choices = [
                                            ...wrong_choices,
                                        ];
                                        new_wrong_choices[index] =
                                            v.target.value;
                                        set_wrong_choices(new_wrong_choices);
                                    }}
                                ></input>
                            </div>
                        );
                    })}
                    <div className="flex justify-center">
                        <button
                            className="bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded"
                            onClick={getOutputedQs}
                        >
                            Generate
                        </button>
                    </div>
                </div>
                <div className="basis-1/2">
                    <h1 className="text-center font-bold text-3xl m-10">
                        output side
                    </h1>
                    <div className="m-4">
                        <div className="whitespace-pre">{output}</div>
                    </div>
                </div>
            </main>
        </div>
    );
}
